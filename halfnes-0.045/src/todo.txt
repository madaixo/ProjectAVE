Todo List For HalfNES:

-Add FDS support

-Add rest of the expansion sound for MMC5 (DMC is missing)

-Work on audio filtering (Yes it's better now, but could still use some work.)
 Need a FIR or IIR filter of some sort but also have to decimate by a non
 integer amount WITHOUT upsampling, because 2 million samples a second is too hard
 to process as is. Not sure how to write one of those.
 Best solution is probably FFT based somehow.
 Real NES uses very simple RC lowpass and highpass filters.

-Find a better solution to DC offset causing sound pops when there's a dropped frame

-Fix all of the single scanline errors, screen jumping in SMB3, random horizontal
 glitches in Slalom etc.
 Probably should move to a pixel based renderer for the very few games with mid 
 scanline effects - is this going to require too much synchronization overhead?
 Could at least update the PPU counters at correct times during scanline.

-Fix the frame limiter so that it won't underrun the audio buffer every time
 there's a lag spike - also deal with audio popping in fullscreen mode (I think
 this is caused by the framerate being fixed by the buffer waiting at 60.0 so
 not enough audio samples are generated but I'm not sure)
 This is dealt with by increasing the audio buffer size for now.

-Add more graphics filters (HQ2x), develop an OpenGL rendering path, rewrite the
 NTSC shader in shader language for speed. Also try incl. scanline and CRT
 phosphor effects.

-Add Savestates, someday (once class structure is pretty much settled).

-Need some better class segregation! Current structure does not represent how
 things are actually connected, and the NES class is the one that actually
 manipulates PPU regs on and off.

-Also stuff with controller wiring and interrupts, and if there's a Zapper in use
 the controller ports need to have access to the display as it's being drawn,
 and all of this needs to support catch up operation in some way.

-Some games freeze when reset with Ctrl+R (missing mapper reset function)

-Use better synchronization with less method calls (options?), and fix the fact 
 that frames are 1/3 of a cpu cycle too short.

-Add a different key listener for some of the menu options (like Pause and Fast 
 Forward) and also the toggles so they don't toggle on and off really quickly
 when I hold the key down. (why did you think fast forward was control-space?)

-Fix whatever is wrong with frame interrupts not happening at the right time or
 at all that breaks a lot of games in the B's. (I think it's when the program is
 spinning waiting for the APU frame IRQ during the frame, because if nothing tries
 to write to the APU currently, it won't "catch up" to where the interrupt is 
 until the end of the frame.
 e: That's not actually it... most of the broken games are waiting on the DMC 
 interrupt, which does actually fire but not always at the correct time.
 Find out if the StarsSE demo ever worked on real hardware or not.

-Improve scanline counter accuracy on several mappers, especially MMC5 and FME-7

Things that will have to wait for pixel-at-a-time PPU:

-Zapper support

-fix the last of the timing problems

-allow for proper per-scanline scroll changing (Rad Racer etc.) where some
 of the counters are only updated at certain points on the line.
 some scrolling registers have to be updated @ specific points in frame.

-Finish MMC5 emulation to allow for proper detection of background/sprite fetches

-Make the MMC3 scanline counter work the way it really does
 (will break Mario Adventure)

Things I can't do without adding a CRC database:

-implement the WRAM disable bit for Mapper 4 (three different implementations!)

-Same for Mapper 1. Making SOROM work was hard enough.

-Sorting out the mappers that are really multiple mappers in one number
 (codemasters one especially!)

-UNIF

Things I probably can't fix at all:

-DMC samples shouldn't always steal 4 cycles (depending on the current instruction
 being executed), and shouldn't take ANY cycles during sprite DMA (since they just
 read the wrong data from the sprite memory instead).
 This is what's breaking The Guardian Legend when there are too many enemies on
 screen.


Broken Games To Fix:
-Dreamworld Pogie (Screen used to roll, but now crashes instantly to win screen!)
-Driar (New homebrew game, relies on unofficial opcodes, fixed the crash but
 for some reason sound drops an octave randomly. Annoying as hell.)
-Bee 52
-Tepples DMC demo
-Brush Roller title screen (wtf?)
-MIG-29 Soviet Fighter (Shares a mapper and this part is unimplemented)
-Fire Hawk
-Break Time
-Burai Fighter
-Bigfoot (freezes)
-Big Nose Freaks Out (freezes)
-GI Joooooe (freezes during intro)
-Laser Invasion (graphics corruption)
-Metal Slader Glory
-Hebereke (and other weirdness with the FME-7)
